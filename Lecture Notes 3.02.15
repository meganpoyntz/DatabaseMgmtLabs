
select avg(dollars)
from orders
where mon = 'mar'
-- count (*) gives you the number of (e.g.) orders where the month is march
-- select * -- count ordno gives you with null
-- sum(qyt) gives you total quantity
-- sum(dollars) gives you total dollar amount
-- avg(dollars) gives you average dollar amount
-- sum, avg, max, min are all aggregates. need to specify by aggregates when you are "grouping by"

select mon,
       sum(dollars) as "total sales"
from orders
group by mon
order by "total sales" DESC
-- this is better becuase you don't have to restate the aggregation
-- postgres double quotes for column names
-- order by can also be written as: order by total_sales DESC (so there is no quotations) --> ONLY can do this in order by

select mon,
       sum(dollars) as "total sales"
from orders
where aid != 'a04'
group by mon
having sum(dollars) < 1000
-- not allowed to use the alias (total_sales) in "having" in postgres --> you need to use the aggregate which is sum(dollars)
order by total_sales DESC

select *
from orders

-- sales report of all agents, by agent by month
select aid,
       mon,
       sum(dollars) as total_sales
from orders
group by mon, aid
order by aid ASC, mon ASC
-- ordering by the output/what we want. order by the cloumns you're grouping by, and order them in the same order, going from general to specific
-- this makes for better information presentation
-- if aid is more important, put aid first in "select" / if month is more important, put mon first in "select"

select *
from
(select aid,
       mon,
       sum(dollars) as total_sales
 from orders
 group by mon, aid
 order by aid ASC, mon ASC) sub1
where total_sales > 1000

select *
from orders
order by ordno
-- hitting F7 gives you the "plan" of what postgres is going to do

select *
from orders, customers
-- taking every customer (1 thru 6) and combining it (multiplying it) by all orders (1 thru 14)
-- cartesian product of customers, orders (multiplying the two)
-- rows labeled 2, 3, 4, 5, and 6, are wrong (they were multiplied, they did not really happen)
-- need to write it correctly so it doesn't multiply:

select *
from orders, customers
where customers.cid = orders.cid
-- primary key is customers --> that's why it comes first
-- in the where clause there is a joined condiditon
-- alternate syntax: on the primary key joining the foreign key
select *
from customers inner join orders
on customers.cid = orders.cid
-- this code is better

-- is it possible to join primary keys with tables that don't have a foreign key? yes
-- just because you can, doesn't mean you shouldn't
-- SHOULD you join primary keys with tables that don't have a goreign key?
-- only do the above if you know what you're doing. you may end up with data that is completely meaningless and leads to no conclusion
-- 96% of the time, there are relationships between the primary key and foreign key that you're joining
select *
from customers inner join agents
on customers.city = agents.city
-- 1st spot: table (e.g. customers or agents), 2nd spot: column/field (e.g. city)

select *
from orders, customers, agents
where customers.cid = orders.cid
  and agents.aid = orders.aid
-- we still have exactly 14 rows, we have customer, order and agent data
-- three-way join that contains 3 tables and 2 join conditions (must have at least 2 join condiditons if you are going to join 3 tables)

-- joining all four tables:
select *
from orders, customers, agents, products
where orders.cid = customers.cid
  and orders.aid = agents.aid
  and orders.pid = products.pid
  
  and (orders.mon = 'feb'or orders.mon = 'mar')
-- we have exactly 14 rows and we are including infromation from all tables. all primary and foreign keys are matching
-- putting orders.___ first is a good way to present the data
-- if you do not put () around the "and 'feb' or 'mar'" condition, it will start multiplying again

select *
from orders o,
     customers c,
     agents a,
     products p
where o.cid = c.cid
  and o.aid = a.aid
  and o.pid = p.pid
  and (o.mon = 'feb'or o.mon = 'mar')
-- giving names of tables a shorter alias

-- another way to write this:
select *
from customers inner join orders on customers.cid = orders.cid
               inner join products on products.pid = orders.pid
               inner join agents on agents.aid = orders.aid
-- this is equivalent to the previous query
-- essentially joining the first two, taking those results and joining with the next one, taking those results and joining again, etc.
-- inner joins are based on matching, so if there is no matching between tables, then that data will not show up in the results
	-- e.g. Weyland-Yutani does not show up
	-- 90% of the time inner joins are equal (there is a primary key that can match with a foreign key)
	-- on labs, it will be asked e.g. "show all customers and all their orders" (even if they didn't make any) --> outer joins 
-- Lab 5 uses joins, do not use subqueries

-- Part 2 of Lecture

select o.ordno, o.cid, o.aid, o.pid,
       0.4 * (o.qty * p.priceUSD) as margin
from orders o, products p
where o.pid = p.pid
-- queries in lab 5 and 6 that require the above math queries


select p.*,
       o.ordno, o.cid, o.aid, o.pid, o.qty,
       0.4 * (o.qty * p.priceUSD) as margin
from orders o, products p
where o.pid = p.pid
-- selecting p.* allows you to list all of the columns from product

-- want to know the customers who live in the same city
-- look at the snapshot by rewriting the scripts (Tiptop and ACME live in Duluth, Basics and Allied live in Dallas)

SELECT c1.name, c1.city,
       c2.name, c2.city
FROM customers c1,
     customers c2
WHERE c1.city = c2.city
  and c1.name != c2.name
-- this is to show that you can join tables to themselves, as long as they have different aliases
SELECT c1.name, c1.city,
       c2.name, c2.city
FROM customers c1,
     customers c2
WHERE c1.city = c2.city
  and c1.name != c2.name
  and c1.cid < c2.cid
  -- this essentially tells it to get rid of the repeats
-- answer to the question. these are customers within the same city

-- OUTER JOINS
	-- you will take ALL of the rows from one or both of the tables and show the matches from other tables where they match, and show NULL from the other tables where they dont match

select *
from customers c left outer join orders o on o.cid = c.cid
-- LEFT because customers is on the left and orders is on the right (it depends on whatever way you write it)
-- LEFT, RIGHT, FULL outer join. full --> give everything on left and right with nulls
-- LEFT or RIGHT, give me everything on L or R and nulls
-- outer joins are very good at getting nulls
select *
from customers c right outer join orders o on o.cid = c.cid
-- not coming up with the 15th row because there is no order from Weylan-Yutani
-- IT ALL DEPENDS ON WHAT DATA YOU PUT ON WHAT SIDE OF THE "__ outer join" condition
	-- there is no difference between a right and left outer join other than the position
select *
from orders o right outer join customers c on c.cid = o.cid
-- this query changed the order, but now it comes up with the 15th row of Weyland-Tutani

select *
from orders o full outer join customers c on c.cid = o.cid
where (c.cid is null or o.cid is null)
-- showing the null values of the data

-- New examples (without above)

create view dallas_customers
as
  select *
  from customers
  where city = 'Dallas'
-- every table from before is now known as a base table (accessible in the CAP2 data)
-- view tables are virtual tables
	-- a view is not a base table (there is already a table with the original information)
	-- it only lives as the query we used to define it
select *
from dallas_customers

create view duluth_customers
as
  select *
  from customers
  where city = 'Duluth'

select *
from duluth_customers
-- good for breaking up data for teams (so teams dont see all the data that the owner can see)
	-- e.g. view table of dallas data for dallas team, view table of duluth data for duluth team
-- also gets rid of duplicate data (you never want to duplicate the data --> view gets rid of it)
-- views are not snapshots --> the results are thrown away after you get them. you are QUERYING views, so you are not taking a snapshot.
	-- views are always up to date
	-- views are good for certain departments seeing certain information (not all depts. of a company need to see all info about an employee)

select *
from customers c, orders o
where o.cid = c.cid
  and dollars > 600
-- then...
create view valuableOrders
as
select o.*,
       c.cid as cust_id
from customers c, orders o
where o.cid = c.cid
  and dollars > 600

select *
from valuableOrders
where mon = 'may'

-- you can join views with other views, base tables, etc.


